---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { getCollection } from 'astro:content'
import { Picture } from 'astro:assets'

import BaseLayout from '../../layouts/layout.astro'
import Link from '../../components/link.astro'
import { getPathFor } from '../../helpers/get-path-for'

export const getStaticPaths = (async () => {
	async function getBooksForAudience(audienceId: string) {
		const books = await getCollection('book', (book) => {
			const bookAudiences = book.data.audience.map(
				(innerAudience) => innerAudience.id,
			)
			return bookAudiences.includes(audienceId)
		})
		return books
	}

	const audiences = await getCollection('book-audience')

	const staticPaths = audiences.map(async (audience) => {
		const books = await getBooksForAudience(audience.id)

		return {
			params: { audience: audience.id },
			props: {
				audience,
				books,
			},
		}
	})

	return Promise.all(staticPaths)
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { audience, books } = Astro.props
---

<BaseLayout
	color="llibres"
	title="Llibres"
	meta={{ title: `Llibres ${audience.data.name}` }}
>
	<h2 slot="aside-top">{audience.data.name}</h2>
	<ul class="book-list">
		{
			books.map((book) => (
				<li class="book">
					<Link href={getPathFor('book', book.id)}>
						<Picture
							alt=""
							class="book-cover"
							densities={[1.5, 2, 3]}
							formats={['avif', 'webp']}
							height={204}
							src={book.data.cover}
						/>
						<div class="book-details">
							<strong>{book.data.title}</strong>
							<br />
							<span>
								{book.data.publisher} ({book.data.year})
							</span>
						</div>
					</Link>
				</li>
			))
		}
	</ul>
</BaseLayout>

<style lang="scss">
	@layer layout {
		.book-list {
			display: grid;
			gap: 2rem;
			grid-auto-flow: dense;
			grid-template-columns: 1fr;
			grid-template-rows: 1fr;
			list-style: none;
			margin: 0;
			padding: 0;

			&:has(a:hover) a:not(:hover) {
				opacity: 0.5;
			}
		}

		.book {
			container: book / inline-size;

			a {
				align-items: flex-start;
				background: var(--color-background-dark);
				border-radius: 0.25rem;
				display: flex;
				font-size: 1.1rem;
				height: 10rem;
				overflow: hidden;
				text-decoration: none;

				&:hover,
				&:focus {
					background: var(--color-background-dark-h);
					transform: scale(1.05);
				}
			}

			picture {
				height: 100%;
			}
		}

		.book-cover {
			height: 100%;
			vertical-align: bottom;
			width: auto;
		}

		.book-details {
			display: block;
			padding: 1rem;

			span {
				color: var(--color-foreground-light);
				font-size: 0.8em;
			}
		}

		@container book (width >= 400px) {
			.book a {
				height: 12rem;
			}
		}

		@media (width >= 940px) {
			.book-list {
				grid-template-columns: repeat(2, 1fr);
			}
		}
	}
</style>
